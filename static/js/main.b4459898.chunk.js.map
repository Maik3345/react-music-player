{"version":3,"sources":["app/shared/components/Item/index.tsx","app/shared/components/ItemList/index.tsx","app/shared/components/Title/index.tsx","app/shared/components/index.ts","app/shared/components/ItemList/styles.module.scss","app/components/Album/styles.module.scss","app/components/Album/components/Song/index.tsx","app/components/Album/Page.tsx","app/components/Album/redux/actions.ts","app/components/Album/redux/types.ts","app/components/Album/redux/reducers.ts","app/components/Album/redux/sagas.ts","app/components/Artist/Page.tsx","app/components/Artist/redux/actions.ts","app/components/Artist/redux/types.ts","app/components/Artist/redux/reducers.ts","app/components/Artist/redux/sagas.ts","app/components/Home/Page.tsx","app/components/Home/redux/actions.ts","app/components/Home/redux/types.ts","app/components/Home/redux/reducers.ts","app/components/Home/redux/sagas.ts","app/redux/reducers.ts","app/redux/sagas.ts","app/redux/index.ts","app/routes/index.ts","app/components/Home/Home.tsx","app/components/Artist/Artist.tsx","app/components/Album/Album.tsx","app/theme.ts","app/App.tsx","serviceWorker.ts","index.tsx","config/index.ts","config/prop.ts","app/shared/components/Item/styles.module.scss","app/components/Artist/styles.module.scss","app/components/Album/components/Song/styles.module.scss","app/components/Home/styles.module.scss","app/shared/index.ts","app/shared/api-service.ts","app/shared/models/index.ts","app/shared/utils.ts"],"names":["Item","props","title","subtitle","image","variant","style","handleClick","className","styles","main","onClick","Avatar","alt","src","avatar","titles","link","Typography","ItemList","children","Title","tag","label","color","fontWeight","module","exports","SongItem","order","song","name","time","previewUrl","marginRight","msToTime","durationMs","Page","album","songs","suggestedSongs","msAllSongs","reduce","total","Number","banner","cursor","info","length","songList","map","s","i","key","window","open","fetchSongs","createAsyncAction","createReducer","handleAction","success","state","payload","combineReducers","getSongList","call","getAllSongs","data","put","failure","takeEvery","request","artist","albums","goTo","useState","imageColors","setImageColors","backgroundColor","setBackgroundColor","useEffect","Math","floor","random","getColors","backgroundImage","popularity","a","totalTracks","suggestedAlbums","filter","id","sort","slice","location","albumSelected","handleItemClick","fetchAlbums","getAlbumList","getAllAlbums","takeLatest","artists","getRandomSong","textAlign","Fab","position","bottom","right","fetchGenres","fetchArtists","fetchRandomSong","genres","_","randomSong","getGenreList","getArtistList","getRandomSongSaga","getAllGenres","getAllArtists","select","home","randomGenre","homeRootSaga","artistRootSaga","albumRootSaga","rootSaga","composeEnhancers","composeWithDevTools","config","REDUX_DEV_TOOLS","history","createBrowserHistory","rootReducer","router","connectRouter","reducers","all","sagas","sagaMiddleware","createSagaMiddleware","middlewares","routerMiddleware","enhancer","applyMiddleware","store","createStore","run","persistStore","routes","path","component","dispatch","useDispatch","useSelector","useCallback","context","push","useMemo","exact","useLocation","useParams","filterAlbumByArtist","idArtist","allAlbums","setAlbums","existAlbums","find","artistAlbums","suggestedAlbumIds","filterSongByAlbum","idAlbum","allSongs","setSongs","setSuggestedSongs","songsWereConsulted","useRef","existSongs","current","forEach","albumSongs","ids","includes","filterSongByAlbums","createMuiTheme","palette","common","black","white","background","paper","default","primary","light","dark","contrastText","secondary","error","text","disabled","hint","typography","fontFamily","join","App","ThemeProvider","theme","Theme","CssBaseline","route","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","API_URL","PLAYER","initialVolume","maxVolume","volumeIncrement","trace","fetch","res","json","e","spotifyUrl","spotify_url","spotifyId","spotify_id","createdAt","Date","created_at","updatedAt","updated_at","pick","console","total_tracks","preview_url","duration_ms","genreName","duration","seconds","minutes","hours","hh","mm","ss"],"mappings":"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","file":"static/js/main.b4459898.chunk.js","sourcesContent":["import { Avatar, Typography } from '@material-ui/core';\r\nimport React, { CSSProperties } from 'react';\r\nimport styles from './styles.module.scss';\r\n\r\nexport interface ItemProps {\r\n  image: string;\r\n  title?: string;\r\n  variant?: 'circle' | 'rounded' | 'square' | undefined;\r\n  style?: CSSProperties;\r\n  handleClick?: () => void;\r\n  subtitle?: string;\r\n}\r\n\r\nexport const Item = (props: ItemProps) => {\r\n  const { title, subtitle, image, variant, style, handleClick } = props;\r\n\r\n  return (\r\n    <div className={styles.main} style={style} onClick={handleClick}>\r\n      <Avatar alt={title} src={image} className={styles.avatar} variant={variant} />\r\n      {(title || subtitle) && (\r\n        <div className={styles.titles}>\r\n          {title && (\r\n            <div className={styles.title}>\r\n              <div className={styles.link}>{title}</div>\r\n            </div>\r\n          )}\r\n          {subtitle && (\r\n            <Typography className={styles.subtitle} variant=\"subtitle1\">\r\n              {subtitle}\r\n            </Typography>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import React, { FC } from 'react';\r\nimport styles from './styles.module.scss';\r\n\r\ninterface ItemListProps {}\r\n\r\nexport const ItemList: FC<ItemListProps> = props => {\r\n  return <div className={styles.main}>{props.children}</div>;\r\n};\r\n","import { Typography } from '@material-ui/core';\r\nimport { TypographyProps } from '@material-ui/core/Typography';\r\nimport React from 'react';\r\nimport styles from './styles.module.scss';\r\n\r\ninterface TitleProps extends TypographyProps {\r\n  tag: any;\r\n  label: string;\r\n}\r\n\r\nexport const Title = (props: TitleProps) => {\r\n  const { tag, label } = props;\r\n\r\n  return (\r\n    <div className={styles.main}>\r\n      <Typography color=\"textPrimary\" variant={tag} style={{ fontWeight: 'bold' }}>\r\n        {label}\r\n      </Typography>\r\n    </div>\r\n  );\r\n};\r\n","export * from './Header';\r\nexport * from './Item';\r\nexport * from './ItemList';\r\nexport * from './Title';\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"styles_main__3cpar\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"styles_main__2uXmG\",\"banner\":\"styles_banner__SLtPd\",\"info\":\"styles_info__1Wn5e\",\"title\":\"styles_title__kfpXV\",\"songList\":\"styles_songList__2WURI\"};","import React from 'react';\r\nimport styles from './styles.module.scss';\r\nimport { Typography } from '@material-ui/core';\r\nimport { Song, msToTime } from '@shared/index';\r\n\r\ninterface SongProps {\r\n  order: number;\r\n  song: Song;\r\n  handleClick: () => void;\r\n}\r\n\r\nexport const SongItem = (props: SongProps) => {\r\n  const { order, song, handleClick } = props;\r\n\r\n  return (\r\n    <div className={styles.main}>\r\n      <div className={styles.name} onClick={handleClick}>\r\n        <span>{order}</span>\r\n        <Typography variant=\"subtitle1\" style={{ fontWeight: 'bold' }}>\r\n          {song.name}\r\n        </Typography>\r\n      </div>\r\n      <div className={styles.time}>\r\n        {!song.previewUrl && (\r\n          <Typography variant=\"subtitle2\" color=\"error\" style={{ marginRight: '2rem' }}>\r\n            No hay preview\r\n          </Typography>\r\n        )}\r\n        <Typography variant=\"subtitle1\">{msToTime(song.durationMs)}</Typography>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { Typography } from '@material-ui/core';\r\nimport { Album, Item, msToTime, Song, Title } from '@shared/index';\r\nimport React, { FC } from 'react';\r\nimport { SongItem } from './components';\r\nimport styles from './styles.module.scss';\r\n\r\ninterface PageProps {\r\n  album: Album;\r\n  songs: Song[];\r\n  suggestedSongs: Song[];\r\n}\r\n\r\nconst Page: FC<PageProps> = props => {\r\n  const { album, songs, suggestedSongs } = props;\r\n  const msAllSongs = songs.reduce((total, song) => (total += Number(song.durationMs)), 0);\r\n\r\n  return (\r\n    <div className={styles.main}>\r\n      <div className={styles.banner}>\r\n        <Item image={album.image} variant=\"rounded\" style={{ cursor: 'default' }} />\r\n\r\n        <div className={styles.info}>\r\n          <Title tag=\"h5\" label={album.name} />\r\n          <Typography className={styles.subtitle} variant=\"subtitle1\">\r\n            {`Álbum • ${album.name}`}\r\n          </Typography>\r\n          <Typography className={styles.subtitle} variant=\"subtitle1\">\r\n            {`${songs.length} canciones • ${msToTime(msAllSongs)}`}\r\n          </Typography>\r\n        </div>\r\n      </div>\r\n\r\n      <div className={styles.songs}>\r\n        <div className={styles.title}>\r\n          <Title tag=\"h5\" label=\"Canciones\" />\r\n        </div>\r\n        <div className={styles.songList}>\r\n          {songs.map((s, i) => (\r\n            <SongItem\r\n              key={i}\r\n              order={i + 1}\r\n              song={s}\r\n              handleClick={() => !!s.previewUrl && window.open(s.previewUrl, '_blank')}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      <div className={styles.songs}>\r\n        <div className={styles.title}>\r\n          <Title tag=\"h5\" label=\"Sugerencias\" />\r\n        </div>\r\n        <div className={styles.songList}>\r\n          {suggestedSongs.map((s, i) => (\r\n            <SongItem\r\n              key={i}\r\n              order={i + 1}\r\n              song={s}\r\n              handleClick={() => !!s.previewUrl && window.open(s.previewUrl, '_blank')}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Page;\r\n","import { Song } from '@shared/models';\r\nimport { createAsyncAction } from 'typesafe-actions';\r\nimport * as types from './types';\r\n\r\nexport const fetchSongs = createAsyncAction(\r\n  types.FETCH_SONGS_REQUEST,\r\n  types.FETCH_SONGS_SUCCESS,\r\n  types.FETCH_SONGS_FAILURE\r\n)<number, Song[], Error>();\r\n","export const FETCH_SONGS_REQUEST = '[Album]: Request all the songs from the album.';\r\nexport const FETCH_SONGS_SUCCESS = '[Album]: The songs of the album were consulted correctly.';\r\nexport const FETCH_SONGS_FAILURE = '[Album]: There was an error checking the songs on the album.';\r\n","import { Song } from '@shared/index';\r\nimport { combineReducers } from 'redux';\r\nimport { createReducer } from 'typesafe-actions';\r\nimport { fetchSongs } from './actions';\r\n\r\nconst songs = createReducer<Song[]>([]).handleAction(fetchSongs.success, (state, { payload }) => [\r\n  ...state,\r\n  ...payload\r\n]);\r\n\r\nexport default combineReducers({\r\n  songs\r\n});\r\n","import { getAllSongs, Song } from '@shared/index';\r\nimport { call, put, takeEvery } from 'redux-saga/effects';\r\nimport { fetchSongs } from './actions';\r\n\r\nfunction* getSongList({\r\n  payload\r\n}: ReturnType<typeof fetchSongs.request>): Generator<any, any, Song[]> {\r\n  try {\r\n    const data = yield call(getAllSongs, payload);\r\n    yield put(fetchSongs.success(data));\r\n  } catch (err) {\r\n    yield put(fetchSongs.failure(err));\r\n  }\r\n}\r\n\r\nexport default [takeEvery(fetchSongs.request, getSongList)];\r\n","import { Typography } from '@material-ui/core';\r\nimport { Album, Artist, Item, ItemList, Title } from '@shared/index';\r\nimport React, { FC, useEffect, useState } from 'react';\r\nimport { ColorExtractor } from 'react-color-extractor';\r\nimport styles from './styles.module.scss';\r\n\r\ninterface PageProps {\r\n  artist: Artist;\r\n  albums: Album[];\r\n  goTo: (location: string, context: any) => void;\r\n}\r\n\r\nconst Page: FC<PageProps> = props => {\r\n  const { artist, albums, goTo } = props;\r\n  const [imageColors, setImageColors] = useState<string[]>([]);\r\n  const [backgroundColor, setBackgroundColor] = useState('');\r\n\r\n  useEffect(() => {\r\n    if (imageColors.length) {\r\n      const color = imageColors[Math.floor(Math.random() * imageColors.length)];\r\n      setBackgroundColor(color);\r\n    }\r\n  }, [imageColors]);\r\n\r\n  const handleItemClick = (album: Album) => {\r\n    const shuffled = albums.filter(a => a.id !== album.id).sort(() => 0.5 - Math.random());\r\n    const suggestedAlbums = shuffled.slice(0, 2);\r\n\r\n    goTo(album.location, {\r\n      albumSelected: album,\r\n      suggestedAlbums\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className={styles.main}>\r\n      <ColorExtractor src={artist.image} getColors={setImageColors} />\r\n\r\n      <div\r\n        className={styles.banner}\r\n        style={{ backgroundImage: `url(${artist.image})`, backgroundColor }}\r\n      >\r\n        <div className={styles.info}>\r\n          <Title tag=\"h3\" label={artist.name} />\r\n          <Typography className={styles.subtitle} variant=\"subtitle1\" color=\"primary\">\r\n            {`Popularidad • ${artist.popularity}`}\r\n          </Typography>\r\n        </div>\r\n      </div>\r\n\r\n      <div className={styles.albums}>\r\n        <div className={styles.title}>\r\n          <Title tag=\"h4\" label=\"Álbumes\" />\r\n        </div>\r\n        <ItemList>\r\n          {albums.map((a, i) => (\r\n            <Item\r\n              key={i}\r\n              image={a.image}\r\n              title={a.name}\r\n              subtitle={`Canciones • ${a.totalTracks}`}\r\n              variant=\"rounded\"\r\n              handleClick={() => handleItemClick(a)}\r\n            />\r\n          ))}\r\n        </ItemList>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Page;\r\n","import { Album } from '@shared/models';\r\nimport { createAsyncAction } from 'typesafe-actions';\r\nimport * as types from './types';\r\n\r\nexport const fetchAlbums = createAsyncAction(\r\n  types.FETCH_ALBUMS_REQUEST,\r\n  types.FETCH_ALBUMS_SUCCESS,\r\n  types.FETCH_ALBUMS_FAILURE\r\n)<number, Album[], Error>();\r\n","export const FETCH_ALBUMS_REQUEST = \"[Artists]: Request an artist's albums.\";\r\nexport const FETCH_ALBUMS_SUCCESS = '[Artists]: The albums have been consulted correctly.';\r\nexport const FETCH_ALBUMS_FAILURE = \"[Artists]: Couldn't check artist albums.\";\r\n","import { Album } from '@shared/index';\r\nimport { combineReducers } from 'redux';\r\nimport { createReducer } from 'typesafe-actions';\r\nimport { fetchAlbums } from './actions';\r\n\r\nconst albums = createReducer<Album[]>([]).handleAction(\r\n  fetchAlbums.success,\r\n  (state, { payload }) => [...state, ...payload]\r\n);\r\n\r\nexport default combineReducers({\r\n  albums\r\n});\r\n","import { Album, getAllAlbums } from '@shared/index';\r\nimport { call, put, takeLatest } from 'redux-saga/effects';\r\nimport { fetchAlbums } from './actions';\r\n\r\nfunction* getAlbumList({\r\n  payload\r\n}: ReturnType<typeof fetchAlbums.request>): Generator<any, any, Album[]> {\r\n  try {\r\n    const data = yield call(getAllAlbums, payload);\r\n    yield put(fetchAlbums.success(data));\r\n  } catch (err) {\r\n    yield put(fetchAlbums.failure(err));\r\n  }\r\n}\r\n\r\nexport default [takeLatest(fetchAlbums.request, getAlbumList)];\r\n","import { Artist, Item, ItemList, Title } from '../../shared';\r\nimport React, { FC } from 'react';\r\nimport styles from './styles.module.scss';\r\nimport { Fab } from '@material-ui/core';\r\nimport PlayArrow from '@material-ui/icons/PlayArrow';\r\n\r\ninterface PageProps {\r\n  artists: Artist[];\r\n  goTo: (location: string, context: any) => void;\r\n  getRandomSong: () => void;\r\n}\r\n\r\nconst Page: FC<PageProps> = props => {\r\n  const { artists, goTo, getRandomSong } = props;\r\n\r\n  return (\r\n    <div className={styles.main}>\r\n      <div className={styles.artists}>\r\n        <div className={styles.title}>\r\n          <Title tag=\"h4\" label=\"Artistas\" />\r\n        </div>\r\n        <ItemList>\r\n          {artists.map((a, i) => (\r\n            <Item\r\n              key={i}\r\n              image={a.image}\r\n              title={a.name}\r\n              subtitle={`Popularidad • ${a.popularity}`}\r\n              style={{ textAlign: 'center' }}\r\n              handleClick={() => goTo(a.location, a)}\r\n            />\r\n          ))}\r\n        </ItemList>\r\n      </div>\r\n      <Fab\r\n        color=\"primary\"\r\n        style={{ position: 'fixed', bottom: 30, right: 30 }}\r\n        onClick={getRandomSong}\r\n      >\r\n        <PlayArrow />\r\n      </Fab>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Page;\r\n","import { Artist, Song } from '@shared/index';\r\nimport { createAsyncAction } from 'typesafe-actions';\r\nimport * as types from './types';\r\n\r\nexport const fetchGenres = createAsyncAction(\r\n  types.FETCH_GENRES_REQUEST,\r\n  types.FETCH_GENRES_SUCCESS,\r\n  types.FETCH_GENRES_FAILURE\r\n)<undefined, string[], Error>();\r\n\r\nexport const fetchArtists = createAsyncAction(\r\n  types.FETCH_ARTISTS_REQUEST,\r\n  types.FETCH_ARTISTS_SUCCESS,\r\n  types.FETCH_ARTISTS_FAILURE\r\n)<undefined, Artist[], Error>();\r\n\r\nexport const fetchRandomSong = createAsyncAction(\r\n  types.FETCH_RANDOM_REQUEST,\r\n  types.FETCH_RANDOM_SUCCESS,\r\n  types.FETCH_RANDOM_FAILURE\r\n)<undefined, Song, Error>();\r\n","export const FETCH_ARTISTS_REQUEST = '[Home]: Request the list of artists.';\r\nexport const FETCH_ARTISTS_SUCCESS = '[Home]: The list of artists was consulted correctly.';\r\nexport const FETCH_ARTISTS_FAILURE = '[Home]: Could not check the list of artists.';\r\n\r\nexport const FETCH_GENRES_REQUEST = '[Home]: Request the list of genres.';\r\nexport const FETCH_GENRES_SUCCESS = '[Home]: The list of genres was consulted correctly.';\r\nexport const FETCH_GENRES_FAILURE = '[Home]: Could not check the list of genres.';\r\n\r\nexport const FETCH_RANDOM_REQUEST = '[Home]: Request the random song.';\r\nexport const FETCH_RANDOM_SUCCESS = '[Home]: The random song was consulted correctly.';\r\nexport const FETCH_RANDOM_FAILURE = '[Home]: Could not check the random song.';\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from 'typesafe-actions';\r\nimport { Artist, Song } from '@shared/index';\r\nimport { fetchArtists, fetchGenres, fetchRandomSong } from './actions';\r\n\r\nconst genres = createReducer<string[]>([]).handleAction(\r\n  fetchGenres.success,\r\n  (_, { payload }) => payload\r\n);\r\n\r\nconst artists = createReducer<Artist[]>([]).handleAction(\r\n  fetchArtists.success,\r\n  (_, { payload }) => payload\r\n);\r\n\r\nconst randomSong = createReducer<Song | null>(null).handleAction(\r\n  fetchRandomSong.success,\r\n  (_, { payload }) => payload\r\n);\r\n\r\nexport default combineReducers({\r\n  genres,\r\n  artists,\r\n  randomSong\r\n});\r\n","import { Artist, getAllArtists, getAllGenres, Song, getRandomSong } from '@shared/index';\r\nimport { call, put, takeLatest, select } from 'redux-saga/effects';\r\nimport { fetchArtists, fetchGenres, fetchRandomSong } from './actions';\r\n\r\nfunction* getGenreList(): Generator<any, any, string[]> {\r\n  try {\r\n    const data = yield call(getAllGenres);\r\n    yield put(fetchGenres.success(data));\r\n  } catch (err) {\r\n    yield put(fetchGenres.failure(err));\r\n  }\r\n}\r\n\r\nfunction* getArtistList(): Generator<any, any, Artist[]> {\r\n  try {\r\n    const data = yield call(getAllArtists);\r\n    yield put(fetchArtists.success(data));\r\n  } catch (err) {\r\n    yield put(fetchArtists.failure(err));\r\n  }\r\n}\r\n\r\nfunction* getRandomSongSaga(): Generator<any, any, any> {\r\n  try {\r\n    const genres: string[] = yield select((state: RootState) => state.home.genres);\r\n    const randomGenre = genres[Math.floor(Math.random() * genres.length)];\r\n    const data: Song = yield call(getRandomSong, randomGenre);\r\n    yield put(fetchRandomSong.success(data));\r\n  } catch (err) {\r\n    yield put(fetchRandomSong.failure(err));\r\n  }\r\n}\r\n\r\nexport default [\r\n  takeLatest(fetchGenres.request, getGenreList),\r\n  takeLatest(fetchArtists.request, getArtistList),\r\n  takeLatest(fetchRandomSong.request, getRandomSongSaga)\r\n];\r\n","import { rootReducer as album } from '@app/components/Album';\r\nimport { rootReducer as artist } from '@app/components/Artist';\r\nimport { rootReducer as home } from '@app/components/Home';\r\n\r\nexport default { album, artist, home };\r\n","import { rootSaga as albumRootSaga } from '@app/components/Album';\r\nimport { rootSaga as artistRootSaga } from '@app/components/Artist';\r\nimport { rootSaga as homeRootSaga } from '@app/components/Home';\r\n\r\nexport default [...homeRootSaga, ...artistRootSaga, ...albumRootSaga];\r\n","import config from '@src/config';\r\nimport { connectRouter, routerMiddleware } from 'connected-react-router';\r\nimport { createBrowserHistory } from 'history';\r\nimport { applyMiddleware, combineReducers, createStore } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport { persistStore } from 'redux-persist';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport { all } from 'redux-saga/effects';\r\nimport reducers from './reducers';\r\nimport sagas from './sagas';\r\n// import storage from 'redux-persist/lib/storage';\r\n\r\n// Options for redux dev tools\r\nconst composeEnhancers = composeWithDevTools({\r\n  ...config.REDUX_DEV_TOOLS\r\n});\r\n\r\n// Browsing history\r\nexport const history = createBrowserHistory();\r\n\r\n// Combine all reducers\r\nexport const rootReducer = combineReducers({\r\n  router: connectRouter(history),\r\n  ...reducers\r\n});\r\n\r\n// Combine all sagas\r\nexport function* rootSaga() {\r\n  yield all(sagas);\r\n}\r\n\r\n// const persistConfig = {\r\n//   storage,\r\n//   key: 'root',\r\n//   blacklist: ['router']\r\n// };\r\n\r\n// const persistedReducer = persistReducer(persistConfig, rootReducer);\r\n\r\n// Configure middlewares\r\nconst sagaMiddleware = createSagaMiddleware();\r\nconst middlewares = [routerMiddleware(history), sagaMiddleware];\r\n\r\n// Compose enhancers\r\nconst enhancer = composeEnhancers(applyMiddleware(...middlewares));\r\n\r\n// create store\r\nconst store = createStore(rootReducer, {}, enhancer);\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\n// Export store singleton instance\r\nexport const persistor = persistStore(store);\r\nexport default store;\r\n","import { Album } from '@app/components/Album';\r\nimport { Artist } from '@app/components/Artist';\r\nimport { Home } from '@app/components/Home';\r\n\r\nconst routes = [\r\n  {\r\n    path: '/',\r\n    component: Home,\r\n    exact: true\r\n  },\r\n  {\r\n    path: '/artist/:id/',\r\n    component: Artist,\r\n    exact: true\r\n  },\r\n  {\r\n    path: '/album/:id/',\r\n    component: Album,\r\n    exact: true\r\n  }\r\n];\r\n\r\nexport default routes;\r\n","import { Artist, Song } from '../../shared';\r\nimport { push } from 'connected-react-router';\r\nimport React, { FC, useCallback, useEffect, useMemo } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Page from './Page';\r\nimport { fetchArtists, fetchGenres, fetchRandomSong } from './redux/actions';\r\n\r\nexport const Home: FC = () => {\r\n  const dispatch = useDispatch();\r\n  const artists = useSelector<RootState, Artist[]>(({ home }) => home.artists);\r\n  const randomSong = useSelector<RootState, Song | null>(({ home }) => home.randomSong);\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchArtists.request());\r\n    dispatch(fetchGenres.request());\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    if (randomSong) {\r\n      if (randomSong.previewUrl) {\r\n        window.open(randomSong.previewUrl, '_blank');\r\n      } else {\r\n        dispatch(fetchRandomSong.request());\r\n      }\r\n    }\r\n  }, [randomSong]);\r\n\r\n  const goTo = useCallback((location: string, context: any) => dispatch(push(location, context)), [\r\n    dispatch\r\n  ]);\r\n\r\n  const getRandomSong = useCallback(() => dispatch(fetchRandomSong.request()), [dispatch]);\r\n\r\n  return useMemo(() => <Page artists={artists} goTo={goTo} getRandomSong={getRandomSong} />, [\r\n    artists\r\n  ]);\r\n};\r\n","import { Album } from '@shared/index';\r\nimport React, { FC, useEffect, useState, useMemo, useCallback } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useLocation, useParams } from 'react-router-dom';\r\nimport Page from './Page';\r\nimport { fetchAlbums } from './redux/actions';\r\nimport { push } from 'connected-react-router';\r\n\r\nexport const Artist: FC = () => {\r\n  const { state } = useLocation();\r\n  const { id } = useParams();\r\n  const filterAlbumByArtist = (a: Album) => a.idArtist === id;\r\n\r\n  const dispatch = useDispatch();\r\n  const allAlbums = useSelector<RootState, Album[]>(({ artist }) => artist.albums);\r\n  const [albums, setAlbums] = useState<Album[]>([]);\r\n\r\n  useEffect(() => {\r\n    const existAlbums = allAlbums.find(filterAlbumByArtist);\r\n    if (id && !existAlbums) {\r\n      dispatch(fetchAlbums.request(id));\r\n    }\r\n  }, [allAlbums, id, dispatch]);\r\n\r\n  useEffect(() => {\r\n    if (id && allAlbums.length) {\r\n      const artistAlbums = allAlbums.filter(filterAlbumByArtist);\r\n      setAlbums(artistAlbums);\r\n    }\r\n  }, [id, allAlbums]);\r\n\r\n  const goTo = useCallback((location: string, context: any) => dispatch(push(location, context)), [\r\n    dispatch\r\n  ]);\r\n\r\n  return useMemo(() => <Page artist={state} albums={albums} goTo={goTo} />, [state, albums]);\r\n};\r\n","import { Album as AlbumModel, Song } from '@shared/index';\r\nimport React, { FC, useEffect, useMemo, useRef, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useLocation, useParams } from 'react-router-dom';\r\nimport Page from './Page';\r\nimport { fetchSongs } from './redux/actions';\r\n\r\nexport const Album: FC = () => {\r\n  const { state } = useLocation();\r\n  const { id } = useParams();\r\n  const suggestedAlbumIds = (state.suggestedAlbums as AlbumModel[]).map(a => a.id);\r\n  const filterSongByAlbum = (s: Song) => s.idAlbum === id;\r\n  const filterSongByAlbums = (s: Song, ids: number[]) => ids.includes(s.idAlbum);\r\n\r\n  const dispatch = useDispatch();\r\n  const allSongs = useSelector<RootState, Song[]>(({ album }) => album.songs);\r\n  const [songs, setSongs] = useState<Song[]>([]);\r\n  const [suggestedSongs, setSuggestedSongs] = useState<Song[]>([]);\r\n  const songsWereConsulted = useRef(false);\r\n\r\n  useEffect(() => {\r\n    const existSongs = allSongs.find(filterSongByAlbum);\r\n\r\n    if (id && !existSongs && !songsWereConsulted.current) {\r\n      const allAlbumIds = [...suggestedAlbumIds, id];\r\n\r\n      allAlbumIds.forEach(id => dispatch(fetchSongs.request(id)));\r\n      songsWereConsulted.current = true;\r\n    }\r\n  }, [allSongs, id, dispatch]);\r\n\r\n  useEffect(() => {\r\n    if (id && allSongs.length) {\r\n      const albumSongs = allSongs.filter(filterSongByAlbum);\r\n      const suggestedSongsFiltered = allSongs.filter(s => filterSongByAlbums(s, suggestedAlbumIds));\r\n      const shuffled = suggestedSongsFiltered.sort(() => 0.5 - Math.random());\r\n      const random = shuffled.slice(0, 5);\r\n\r\n      setSuggestedSongs(random);\r\n      setSongs(albumSongs);\r\n    }\r\n  }, [id, allSongs]);\r\n\r\n  return useMemo(\r\n    () => <Page album={state.albumSelected} songs={songs} suggestedSongs={suggestedSongs} />,\r\n    [state, songs, suggestedSongs]\r\n  );\r\n};\r\n","import { createMuiTheme } from '@material-ui/core';\r\n\r\nexport default createMuiTheme({\r\n  palette: {\r\n    common: {\r\n      black: 'rgba(0, 0, 0, 1)',\r\n      white: 'rgba(255, 255, 255, 1)'\r\n    },\r\n    background: {\r\n      paper: 'rgba(255, 255, 255, 1)',\r\n      default: 'rgba(0, 0, 0, 1)'\r\n    },\r\n    primary: {\r\n      light: 'rgba(255, 90, 54, 1)',\r\n      main: 'rgba(255, 0, 0, 1)',\r\n      dark: 'rgba(194, 0, 0, 1)',\r\n      contrastText: 'rgba(255, 255, 255, 1)'\r\n    },\r\n    secondary: {\r\n      light: 'rgba(99, 250, 255, 1)',\r\n      main: 'rgba(0, 199, 206, 1)',\r\n      dark: 'rgba(0, 150, 157, 1)',\r\n      contrastText: 'rgba(255, 255, 255, 1)'\r\n    },\r\n    error: {\r\n      light: '#e57373',\r\n      main: '#f44336',\r\n      dark: '#d32f2f',\r\n      contrastText: '#fff'\r\n    },\r\n    text: {\r\n      primary: 'rgba(255, 255, 255, 1)',\r\n      secondary: 'rgba(170, 170, 170, 1)',\r\n      disabled: 'rgba(255, 255, 255, 1)',\r\n      hint: 'rgba(255, 255, 255, 1)'\r\n    }\r\n  },\r\n  typography: {\r\n    fontFamily: ['\"Open Sans\"', '\"Segoe UI\"', 'Roboto', 'Arial', 'sans-serif'].join(',')\r\n  }\r\n});\r\n","import { CssBaseline } from '@material-ui/core';\r\nimport { ThemeProvider } from '@material-ui/styles';\r\nimport { ConnectedRouter } from 'connected-react-router';\r\nimport React, { FC } from 'react';\r\nimport { Provider as ReduxProvider } from 'react-redux';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport store, { history } from './redux';\r\nimport routes from './routes';\r\nimport Theme from './theme';\r\n\r\nconst getRoutes = () => routes.map(route => <Route key={route.path} {...route} />);\r\n\r\nconst App: FC = () => (\r\n  <ReduxProvider store={store}>\r\n    <ConnectedRouter history={history}>\r\n      <ThemeProvider theme={Theme}>\r\n        <CssBaseline />\r\n        <Switch>{getRoutes()}</Switch>\r\n      </ThemeProvider>\r\n    </ConnectedRouter>\r\n  </ReduxProvider>\r\n);\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './app/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import dev from './dev';\r\nimport prod from './prop';\r\n\r\nconst configForStage: Partial<EnvironmentConfig> =\r\n  process.env.NODE_ENV === 'production' ? prod : dev;\r\n\r\nconst commons: Partial<EnvironmentConfig> = {\r\n  API_URL: 'https://rubytify.herokuapp.com/api/v1',\r\n  PLAYER: {\r\n    initialVolume: 10,\r\n    maxVolume: 100,\r\n    volumeIncrement: 5\r\n  }\r\n};\r\n\r\nconst config: Partial<EnvironmentConfig> = {\r\n  ...commons,\r\n  ...configForStage\r\n};\r\n\r\nexport default config;\r\n","const config: Partial<EnvironmentConfig> = {\r\n  REDUX_DEV_TOOLS: {\r\n    trace: false\r\n  }\r\n};\r\n\r\nexport default config;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"styles_main__3pv9m\",\"avatar\":\"styles_avatar__206GC\",\"link\":\"styles_link__1C8ur\",\"titles\":\"styles_titles__2lWX_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"styles_main__143pa\",\"banner\":\"styles_banner__1vJvt\",\"info\":\"styles_info__7qPPn\",\"actions\":\"styles_actions__iXoc8\",\"title\":\"styles_title__11CTh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"styles_main__3DYtz\",\"name\":\"styles_name__3qjjV\",\"time\":\"styles_time__TsZKE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"styles_main__EeQTN\",\"title\":\"styles_title__2Vc-0\"};","export * from './api-service';\r\nexport * from './components';\r\nexport * from './models';\r\nexport * from './utils';\r\n","import config from '@src/config';\r\nimport { pick } from 'ramda';\r\nimport { Artist, Album, Song } from './models';\r\n\r\nexport interface ApiResponse<T> {\r\n  data: T;\r\n}\r\n\r\nexport const getAllArtists = async () => {\r\n  try {\r\n    const res = await fetch(`${config.API_URL}/artists`);\r\n    const { data = [] }: ApiResponse<any[]> = await res.json();\r\n\r\n    return data.map(e => ({\r\n      location: `/artist/${e.id}/`,\r\n      spotifyUrl: e.spotify_url,\r\n      spotifyId: e.spotify_id,\r\n      createdAt: new Date(e.created_at),\r\n      updatedAt: new Date(e.updated_at),\r\n      ...pick(['id', 'name', 'image', 'genres', 'popularity'], e)\r\n    })) as Artist[];\r\n  } catch (err) {\r\n    console.error('The list of artists of the api could not be consulted.', err);\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const getAllAlbums = async (idArtist: number): Promise<Album[]> => {\r\n  try {\r\n    const res = await fetch(`${config.API_URL}/artists/${idArtist}/albums`);\r\n    const { data = [] }: ApiResponse<any[]> = await res.json();\r\n\r\n    return data.map(e => ({\r\n      idArtist,\r\n      location: `/album/${e.id}/`,\r\n      spotifyUrl: e.spotify_url,\r\n      totalTracks: e.total_tracks,\r\n      ...pick(['id', 'name', 'image'], e)\r\n    })) as Album[];\r\n  } catch (err) {\r\n    console.error(`Couldn't check artist: \"${idArtist}\" albums.`, err);\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const getAllSongs = async (idAlbum: number): Promise<Song[]> => {\r\n  try {\r\n    const res = await fetch(`${config.API_URL}/albums/${idAlbum}/songs`);\r\n    const { data = [] }: ApiResponse<any[]> = await res.json();\r\n\r\n    return data.map(e => ({\r\n      idAlbum,\r\n      spotifyUrl: e.spotify_url,\r\n      previewUrl: e.preview_url,\r\n      durationMs: e.duration_ms,\r\n      ...pick(['id', 'name', 'explicit'], e)\r\n    })) as Song[];\r\n  } catch (err) {\r\n    console.error(`Could not check the list of songs for the album: \"${idAlbum}\".`, err);\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const getAllGenres = async (): Promise<string[]> => {\r\n  try {\r\n    const res = await fetch(`${config.API_URL}/genres`);\r\n    const { data = [] }: ApiResponse<string[]> = await res.json();\r\n\r\n    return data;\r\n  } catch (err) {\r\n    console.error(`The genre list could not be consulted.`, err);\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const getRandomSong = async (genreName: string) => {\r\n  try {\r\n    const res = await fetch(`${config.API_URL}/genres/${genreName}/random_song`);\r\n    const { data = {} }: ApiResponse<any> = await res.json();\r\n\r\n    return {\r\n      spotifyUrl: data.spotify_url,\r\n      previewUrl: data.preview_url,\r\n      durationMs: data.duration_ms,\r\n      ...pick(['id', 'name', 'explicit'], data)\r\n    } as Song;\r\n  } catch (err) {\r\n    console.error(`Could not check the random song with gender: \"${genreName}\".`, err);\r\n  }\r\n};\r\n","export * from './album';\r\nexport * from './artist';\r\nexport * from './player';\r\nexport * from './songs';\r\n","export function msToTime(duration: any) {\r\n  const seconds = Math.floor((duration / 1000) % 60),\r\n    minutes = Math.floor((duration / (1000 * 60)) % 60),\r\n    hours = Math.floor((duration / (1000 * 60 * 60)) % 24);\r\n\r\n  const hh = hours < 10 ? '0' + hours : hours;\r\n  const mm = minutes < 10 ? '0' + minutes : minutes;\r\n  const ss = seconds < 10 ? '0' + seconds : seconds;\r\n\r\n  return `${hh === '00' ? '' : hh + ':'}${mm === '00' ? '' : mm + ':'}${ss}`;\r\n}\r\n"],"sourceRoot":""}